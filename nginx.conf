events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Ocultar información del servidor
    server_tokens off;

    # Configuración de logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Cabeceras de seguridad GLOBALES (aplicadas a TODAS las respuestas)
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # CSP aplicada GLOBALMENTE a todas las respuestas
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' http://localhost:8080 http://localhost:8081; frame-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self';" always;

        # BLOQUEO TOTAL de archivos sensibles - MÁS ESTRICTO

        # Bloquear CUALQUIER archivo que empiece con punto
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Bloquear directorios de control de versiones específicamente
        location ~ /\.(git|svn|hg|bzr|darcs|gitkeeper|gitkeep)/ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Bloquear archivos específicos por nombre exacto
        location = /.gitkeeper {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        location = /.gitkeep {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Bloquear archivos de backup y temporales
        location ~ \.(bak|backup|old|tmp|temp|log|conf|ini|env)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Bloquear archivos específicos comunes
        location ~ /(README|CHANGELOG|LICENSE|\.env|\.htaccess|web\.config|composer\.json|package\.json)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Favicon con cabeceras de seguridad completas
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            expires 1y;
            add_header Cache-Control "public, immutable" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
            add_header Content-Security-Policy "default-src 'self';" always;

            # Si no existe, retornar 404 silencioso
            try_files $uri =404;
        }

        # Assets estáticos con cabeceras completas
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
            add_header Content-Security-Policy "default-src 'self';" always;

            # Validar que el archivo existe
            try_files $uri =404;
        }

        # Configuración para Angular SPA
        location / {
            try_files $uri $uri/ /index.html;

            # Cabeceras específicas para HTML
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        # Robots.txt con cabeceras de seguridad
        location = /robots.txt {
            access_log off;
            log_not_found off;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
            add_header Content-Security-Policy "default-src 'self';" always;
        }

        # Sitemap.xml con cabeceras de seguridad
        location = /sitemap.xml {
            access_log off;
            log_not_found off;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
            add_header Content-Security-Policy "default-src 'self';" always;
        }

        # Bloquear acceso a archivos de configuración adicionales
        location ~ \.(htaccess|htpasswd|ini|log|sh|sql|conf|config)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Custom error pages con cabeceras de seguridad
        error_page 403 404 /index.html;
        error_page 500 502 503 504 /index.html;

        # Interceptar 404s para archivos sensibles y retornar 404 limpio
        location @not_found {
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
            add_header Content-Security-Policy "default-src 'self';" always;
            return 404;
        }
    }
}
